(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * A filter that slices a collection.
 * This is usefule when telling pagination where to begin.
 *
 * @input: parsable to a number
 * @start: number
 */

var StartFrom = function(input, start) {
  start = +start; //parse to int
  return input.slice(start);
};

module.exports = StartFrom;

},{}],2:[function(require,module,exports){
// Require measurements filters
Bytes    = require('./measurements/bytes');
KiloCase = require('./measurements/kilo-case');
KiloCase = require('./measurements/bandwidth');

// Require collections filters
StartFrom = require('./collections/start-from');

var PublicInterface = {
  'Measurements': {
    'Bytes':     Bytes,
    'Bandwidth': Bandwidth,
    'KiloCase':  KiloCase
  },
  'Collections': {
    'StartFrom': StartFrom
  }
};

module.exports = PublicInterface;

},{"./collections/start-from":1,"./measurements/bandwidth":3,"./measurements/bytes":4,"./measurements/kilo-case":5}],3:[function(require,module,exports){
/*
 * @iops: number
 * @maxSize: number
 * @maxIops: number
 *
 * Returns the amount of bandwidth being currently used
 */

var Bandwidth = function (iops, maxSize, maxIops) {
  return maxSize * iops / (maxIops / 100);
};

module.exports = Bandwidth;

},{}],4:[function(require,module,exports){
/*
 * Returns a number of bytes translated into a readable,
 * formatted version with the proper suffix.
 *
 * @bytes: number
 * @binary: boolean
 * @decimalPlaces: number
 *
 */

var Bytes = function (bytes, binary, decimalPlaces) {

  var thresh = binary ? 1024 : 1000,
      binaryUnits = ['KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB'],
      decimalUnits = ['KB','MB','GB','TB','PB','EB','ZB','YB'],
      units = binary ? binaryUnits : decimalUnits,
      u = -1;

  if (!bytes) {
    return '0 B';
  }

  if (bytes < thresh) {
    return (decimalPlaces || decimalPlaces === 0) ? bytes.toFixed(decimalPlaces) + ' B' : bytes.toFixed(1) + ' B';
  }

  do {
    bytes /= thresh;
    ++u;
  } while (bytes >= thresh);

  return bytes.toFixed(decimalPlaces) + ' ' + units[u];
};

module.exports = Bytes;

},{}],5:[function(require,module,exports){
/*
 * Returns a measurement translated into a readable,
 * formatted version with the proper suffix.
 *
 * @value: number
 * @decimalPlaces: number
 *
 */

var KiloCase = function (value, decimalPlaces) {
  var thresh = 1000,
      units = ['K','M','G','T','P','E','Z','Y'],
      u = -1;

  if (value < thresh) {
    return value.toFixed(decimalPlaces);
  }

  do {
    value /= thresh;
    ++u;
  } while (value >= thresh);

  return value.toFixed(decimalPlaces) + ' ' + units[u];
};

module.exports = KiloCase;

},{}],6:[function(require,module,exports){
var CSFilters = require('cs-filters');

var app = angular.module('cs-filters', []);

app.filter('bytes',      function() { return CSFilters.Measurements.Bytes;     });
app.filter('bandwidth',  function() { return CSFilters.Measurements.Bandwidth; });
app.filter('kilocase',   function() { return CSFilters.Measurements.KiloCase;  });

app.filter('start-from', function() { return CSFilters.Collections.StartFrom;  });

app.factory('csFilters', [function() {
  return CSFilters;
}]);

module.exports = app;

},{"cs-filters":2}]},{},[6]);
